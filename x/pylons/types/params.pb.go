// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pylons/params.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GoogleIAPPackage struct {
	PackageName string                                 `protobuf:"bytes,1,opt,name=PackageName,proto3" json:"PackageName,omitempty" yaml:"package_name"`
	ProductID   string                                 `protobuf:"bytes,2,opt,name=ProductID,proto3" json:"ProductID,omitempty" yaml:"product_id"`
	Amount      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=Amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"Amount" yaml:"amount"`
}

func (m *GoogleIAPPackage) Reset()         { *m = GoogleIAPPackage{} }
func (m *GoogleIAPPackage) String() string { return proto.CompactTextString(m) }
func (*GoogleIAPPackage) ProtoMessage()    {}
func (*GoogleIAPPackage) Descriptor() ([]byte, []int) {
	return fileDescriptor_32b96d3026fd9730, []int{0}
}
func (m *GoogleIAPPackage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoogleIAPPackage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoogleIAPPackage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoogleIAPPackage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoogleIAPPackage.Merge(m, src)
}
func (m *GoogleIAPPackage) XXX_Size() int {
	return m.Size()
}
func (m *GoogleIAPPackage) XXX_DiscardUnknown() {
	xxx_messageInfo_GoogleIAPPackage.DiscardUnknown(m)
}

var xxx_messageInfo_GoogleIAPPackage proto.InternalMessageInfo

func (m *GoogleIAPPackage) GetPackageName() string {
	if m != nil {
		return m.PackageName
	}
	return ""
}

func (m *GoogleIAPPackage) GetProductID() string {
	if m != nil {
		return m.ProductID
	}
	return ""
}

type CoinIssuer struct {
	CoinDenom       string              `protobuf:"bytes,1,opt,name=CoinDenom,proto3" json:"CoinDenom,omitempty" yaml:"coin_denom"`
	Packages        []*GoogleIAPPackage `protobuf:"bytes,2,rep,name=Packages,proto3" json:"Packages,omitempty" yaml:"google_iap_packages"`
	GoogleIAPPubKey string              `protobuf:"bytes,3,opt,name=GoogleIAPPubKey,proto3" json:"GoogleIAPPubKey,omitempty" yaml:"google_iap_pubkey"`
}

func (m *CoinIssuer) Reset()         { *m = CoinIssuer{} }
func (m *CoinIssuer) String() string { return proto.CompactTextString(m) }
func (*CoinIssuer) ProtoMessage()    {}
func (*CoinIssuer) Descriptor() ([]byte, []int) {
	return fileDescriptor_32b96d3026fd9730, []int{1}
}
func (m *CoinIssuer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinIssuer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinIssuer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinIssuer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinIssuer.Merge(m, src)
}
func (m *CoinIssuer) XXX_Size() int {
	return m.Size()
}
func (m *CoinIssuer) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinIssuer.DiscardUnknown(m)
}

var xxx_messageInfo_CoinIssuer proto.InternalMessageInfo

func (m *CoinIssuer) GetCoinDenom() string {
	if m != nil {
		return m.CoinDenom
	}
	return ""
}

func (m *CoinIssuer) GetPackages() []*GoogleIAPPackage {
	if m != nil {
		return m.Packages
	}
	return nil
}

func (m *CoinIssuer) GetGoogleIAPPubKey() string {
	if m != nil {
		return m.GoogleIAPPubKey
	}
	return ""
}

// Params represent the parameters used by the pylons module
type Params struct {
	MinNameFieldLength        uint64                                 `protobuf:"varint,1,opt,name=minNameFieldLength,proto3" json:"minNameFieldLength,omitempty" yaml:"min_name_field_length"`
	MinDescriptionFieldLength uint64                                 `protobuf:"varint,2,opt,name=minDescriptionFieldLength,proto3" json:"minDescriptionFieldLength,omitempty" yaml:"min_description_field_length"`
	CoinIssuers               []CoinIssuer                           `protobuf:"bytes,3,rep,name=coinIssuers,proto3" json:"coinIssuers" yaml:"coin_issuers"`
	RecipeFeePercentage       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=recipeFeePercentage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"recipeFeePercentage" yaml:"recipe_fee_percentage"`
	ItemTransferFeePercentage github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=itemTransferFeePercentage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"itemTransferFeePercentage" yaml:"item_transfer_fee_percentage"`
	UpdateItemStringFee       *types.Coin                            `protobuf:"bytes,6,opt,name=UpdateItemStringFee,proto3" json:"UpdateItemStringFee,omitempty" yaml:"update_item_string_fee"`
	MinTransferFee            github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=minTransferFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"minTransferFee" yaml:"min_transfer_fee"`
	MaxTransferFee            github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=maxTransferFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"maxTransferFee" yaml:"max_transfer_fee"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_32b96d3026fd9730, []int{2}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMinNameFieldLength() uint64 {
	if m != nil {
		return m.MinNameFieldLength
	}
	return 0
}

func (m *Params) GetMinDescriptionFieldLength() uint64 {
	if m != nil {
		return m.MinDescriptionFieldLength
	}
	return 0
}

func (m *Params) GetCoinIssuers() []CoinIssuer {
	if m != nil {
		return m.CoinIssuers
	}
	return nil
}

func (m *Params) GetUpdateItemStringFee() *types.Coin {
	if m != nil {
		return m.UpdateItemStringFee
	}
	return nil
}

func init() {
	proto.RegisterType((*GoogleIAPPackage)(nil), "Pylonstech.pylons.pylons.GoogleIAPPackage")
	proto.RegisterType((*CoinIssuer)(nil), "Pylonstech.pylons.pylons.CoinIssuer")
	proto.RegisterType((*Params)(nil), "Pylonstech.pylons.pylons.Params")
}

func init() { proto.RegisterFile("pylons/params.proto", fileDescriptor_32b96d3026fd9730) }

var fileDescriptor_32b96d3026fd9730 = []byte{
	// 715 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0xc7, 0xe3, 0xb6, 0x5f, 0xda, 0x4e, 0xf4, 0xdd, 0x1c, 0x50, 0xdd, 0x52, 0xec, 0x60, 0x10,
	0x54, 0x88, 0xda, 0x6a, 0xbb, 0xa2, 0x1b, 0xd4, 0x50, 0x05, 0x05, 0x50, 0x15, 0x19, 0x2a, 0x24,
	0x36, 0xd6, 0xc4, 0x39, 0x71, 0x47, 0x8d, 0x67, 0x8c, 0x67, 0x82, 0x9a, 0x1d, 0x8f, 0x80, 0xc4,
	0x06, 0x89, 0x0d, 0x4b, 0x1e, 0xa5, 0xcb, 0x2e, 0x11, 0x48, 0x16, 0x4a, 0x9f, 0x00, 0x3f, 0x01,
	0xf2, 0xd8, 0xd4, 0x6e, 0xda, 0x2c, 0x2a, 0x56, 0x33, 0xc9, 0x39, 0xe7, 0xf7, 0x3f, 0x37, 0x8d,
	0x51, 0x3d, 0x1c, 0x0d, 0x18, 0xe5, 0x76, 0x88, 0x23, 0x1c, 0x70, 0x2b, 0x8c, 0x98, 0x60, 0xaa,
	0xd6, 0x91, 0x7f, 0x0a, 0xf0, 0x0e, 0xac, 0xcc, 0x9e, 0x1f, 0x2b, 0xd7, 0x7c, 0xe6, 0x33, 0xe9,
	0x64, 0xa7, 0xb7, 0xcc, 0x7f, 0x45, 0xf7, 0x18, 0x0f, 0x18, 0xb7, 0xbb, 0x98, 0x83, 0xfd, 0x76,
	0xa3, 0x0b, 0x02, 0x6f, 0xd8, 0x1e, 0x23, 0x34, 0xb3, 0x9b, 0xdf, 0x15, 0xf4, 0xdf, 0x13, 0xc6,
	0xfc, 0x01, 0xb4, 0x77, 0x3a, 0x1d, 0xec, 0x1d, 0x62, 0x1f, 0xd4, 0x87, 0xa8, 0x96, 0x5f, 0xf7,
	0x70, 0x00, 0x9a, 0xd2, 0x50, 0xd6, 0x16, 0x9b, 0x4b, 0x49, 0x6c, 0xd4, 0x47, 0x38, 0x18, 0x6c,
	0x9b, 0x61, 0x66, 0x74, 0x29, 0x0e, 0xc0, 0x74, 0xca, 0xbe, 0xea, 0x16, 0x5a, 0xec, 0x44, 0xac,
	0x37, 0xf4, 0x44, 0x7b, 0x57, 0x9b, 0x91, 0x81, 0xd7, 0x93, 0xd8, 0xf8, 0x3f, 0x0f, 0xcc, 0x4c,
	0x2e, 0xe9, 0x99, 0x4e, 0xe1, 0xa7, 0xbe, 0x42, 0xd5, 0x9d, 0x80, 0x0d, 0xa9, 0xd0, 0x66, 0x65,
	0xc4, 0xa3, 0xe3, 0xd8, 0xa8, 0x7c, 0x8b, 0x8d, 0xbb, 0x3e, 0x11, 0x07, 0xc3, 0xae, 0xe5, 0xb1,
	0xc0, 0xce, 0xeb, 0xc8, 0x8e, 0x75, 0xde, 0x3b, 0xb4, 0xc5, 0x28, 0x04, 0x6e, 0xed, 0x82, 0x97,
	0xc4, 0xc6, 0xdf, 0x19, 0x1f, 0x4b, 0x8a, 0xe9, 0xe4, 0x38, 0xf3, 0xa7, 0x82, 0xd0, 0x63, 0x46,
	0x68, 0x9b, 0xf3, 0x21, 0x44, 0x69, 0x72, 0xe9, 0xaf, 0x5d, 0xa0, 0x2c, 0xc8, 0xab, 0x2a, 0x25,
	0x97, 0x76, 0xc5, 0xed, 0xa5, 0x36, 0xd3, 0x29, 0xfc, 0xd4, 0x3e, 0x5a, 0xc8, 0x0b, 0xe4, 0xda,
	0x4c, 0x63, 0x76, 0xad, 0xb6, 0x79, 0xdf, 0x9a, 0x36, 0x04, 0x6b, 0xb2, 0x95, 0x4d, 0x3d, 0x89,
	0x8d, 0x95, 0x8c, 0xef, 0x4b, 0x9b, 0x4b, 0x70, 0xe8, 0xe6, 0x0d, 0xe4, 0xa6, 0x73, 0xc6, 0x56,
	0x5b, 0xe8, 0xdf, 0x22, 0x7a, 0xd8, 0x7d, 0x06, 0xa3, 0xbc, 0x1b, 0xab, 0x49, 0x6c, 0x68, 0x17,
	0x11, 0xc3, 0xee, 0x21, 0x8c, 0x4c, 0x67, 0x32, 0xc8, 0xfc, 0x34, 0x8f, 0xaa, 0x1d, 0xb9, 0x32,
	0x6a, 0x07, 0xa9, 0x01, 0xa1, 0xe9, 0x5c, 0x5a, 0x04, 0x06, 0xbd, 0xe7, 0x40, 0x7d, 0x71, 0x20,
	0x0b, 0x9f, 0x6b, 0x36, 0x92, 0xd8, 0x58, 0xcd, 0xa8, 0x01, 0xa1, 0x72, 0x94, 0x6e, 0x3f, 0xf5,
	0x72, 0x07, 0xd2, 0xcd, 0x74, 0x2e, 0x89, 0x55, 0x01, 0x2d, 0x07, 0x69, 0x63, 0xb8, 0x17, 0x91,
	0x50, 0x10, 0x46, 0xcb, 0xe0, 0x19, 0x09, 0xbe, 0x97, 0xc4, 0xc6, 0xed, 0x02, 0xdc, 0x2b, 0x7c,
	0x27, 0xf8, 0xd3, 0x49, 0xaa, 0x87, 0x6a, 0xde, 0xd9, 0xd8, 0xb8, 0x36, 0x2b, 0xdb, 0x7e, 0x67,
	0x7a, 0xdb, 0x8b, 0x19, 0x37, 0x6f, 0xa4, 0xbb, 0x53, 0xac, 0xaa, 0x1c, 0x2a, 0xc9, 0x38, 0xa6,
	0x53, 0xa6, 0xaa, 0xef, 0x14, 0x54, 0x8f, 0xc0, 0x23, 0x21, 0xb4, 0x00, 0x3a, 0x10, 0x79, 0x40,
	0x05, 0xf6, 0x41, 0x9b, 0x93, 0x5d, 0xdf, 0xbb, 0xf2, 0x0e, 0xe6, 0xdd, 0xcc, 0x90, 0x6e, 0x1f,
	0xc0, 0x0d, 0xcf, 0xa0, 0xa6, 0x73, 0x99, 0x94, 0xfa, 0x41, 0x41, 0xcb, 0x44, 0x40, 0xf0, 0x32,
	0xc2, 0x94, 0xf7, 0x21, 0x3a, 0x9f, 0xc8, 0x5f, 0x32, 0x91, 0xfd, 0x2b, 0x27, 0x92, 0x77, 0x3f,
	0x05, 0xbb, 0x22, 0x27, 0x5f, 0xc8, 0x67, 0xba, 0xae, 0x4a, 0x51, 0x7d, 0x3f, 0xec, 0x61, 0x01,
	0x6d, 0x01, 0xc1, 0x0b, 0x11, 0x11, 0xea, 0xb7, 0x00, 0xb4, 0x6a, 0x43, 0x59, 0xab, 0x6d, 0x2e,
	0x5b, 0x99, 0xaa, 0x95, 0xbe, 0x28, 0x56, 0xfe, 0xa2, 0xc8, 0x01, 0x34, 0x6f, 0x25, 0xb1, 0x71,
	0x33, 0xd3, 0x1e, 0xca, 0x78, 0x57, 0xa6, 0xc0, 0x25, 0x21, 0x4d, 0xc0, 0x74, 0x2e, 0x03, 0xab,
	0x6f, 0xd0, 0x3f, 0x01, 0xa1, 0xa5, 0x5c, 0xb4, 0x79, 0x59, 0x79, 0xfb, 0xca, 0x95, 0x2f, 0x15,
	0x7b, 0x57, 0x2e, 0xdc, 0x74, 0x26, 0x04, 0xa4, 0x24, 0x3e, 0x2a, 0x4b, 0x2e, 0xfc, 0xa1, 0x24,
	0x3e, 0xba, 0x20, 0x79, 0x4e, 0x60, 0x7b, 0xee, 0xe3, 0x67, 0xa3, 0xd2, 0x7c, 0xfa, 0x65, 0xac,
	0x2b, 0xc7, 0x63, 0x5d, 0x39, 0x19, 0xeb, 0xca, 0x8f, 0xb1, 0xae, 0xbc, 0x3f, 0xd5, 0x2b, 0x27,
	0xa7, 0x7a, 0xe5, 0xeb, 0xa9, 0x5e, 0x79, 0xfd, 0xa0, 0x24, 0x9b, 0x2d, 0xfb, 0x7a, 0xba, 0xed,
	0x76, 0xfe, 0x25, 0x38, 0xfa, 0x7d, 0x91, 0x09, 0x74, 0xab, 0xf2, 0x09, 0xdf, 0xfa, 0x15, 0x00,
	0x00, 0xff, 0xff, 0xf7, 0xd9, 0xf5, 0x27, 0x29, 0x06, 0x00, 0x00,
}

func (this *GoogleIAPPackage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GoogleIAPPackage)
	if !ok {
		that2, ok := that.(GoogleIAPPackage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PackageName != that1.PackageName {
		return false
	}
	if this.ProductID != that1.ProductID {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *CoinIssuer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CoinIssuer)
	if !ok {
		that2, ok := that.(CoinIssuer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CoinDenom != that1.CoinDenom {
		return false
	}
	if len(this.Packages) != len(that1.Packages) {
		return false
	}
	for i := range this.Packages {
		if !this.Packages[i].Equal(that1.Packages[i]) {
			return false
		}
	}
	if this.GoogleIAPPubKey != that1.GoogleIAPPubKey {
		return false
	}
	return true
}
func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinNameFieldLength != that1.MinNameFieldLength {
		return false
	}
	if this.MinDescriptionFieldLength != that1.MinDescriptionFieldLength {
		return false
	}
	if len(this.CoinIssuers) != len(that1.CoinIssuers) {
		return false
	}
	for i := range this.CoinIssuers {
		if !this.CoinIssuers[i].Equal(&that1.CoinIssuers[i]) {
			return false
		}
	}
	if !this.RecipeFeePercentage.Equal(that1.RecipeFeePercentage) {
		return false
	}
	if !this.ItemTransferFeePercentage.Equal(that1.ItemTransferFeePercentage) {
		return false
	}
	if !this.UpdateItemStringFee.Equal(that1.UpdateItemStringFee) {
		return false
	}
	if !this.MinTransferFee.Equal(that1.MinTransferFee) {
		return false
	}
	if !this.MaxTransferFee.Equal(that1.MaxTransferFee) {
		return false
	}
	return true
}
func (m *GoogleIAPPackage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoogleIAPPackage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoogleIAPPackage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ProductID) > 0 {
		i -= len(m.ProductID)
		copy(dAtA[i:], m.ProductID)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ProductID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PackageName) > 0 {
		i -= len(m.PackageName)
		copy(dAtA[i:], m.PackageName)
		i = encodeVarintParams(dAtA, i, uint64(len(m.PackageName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CoinIssuer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinIssuer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinIssuer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GoogleIAPPubKey) > 0 {
		i -= len(m.GoogleIAPPubKey)
		copy(dAtA[i:], m.GoogleIAPPubKey)
		i = encodeVarintParams(dAtA, i, uint64(len(m.GoogleIAPPubKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Packages) > 0 {
		for iNdEx := len(m.Packages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Packages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CoinDenom) > 0 {
		i -= len(m.CoinDenom)
		copy(dAtA[i:], m.CoinDenom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.CoinDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaxTransferFee.Size()
		i -= size
		if _, err := m.MaxTransferFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.MinTransferFee.Size()
		i -= size
		if _, err := m.MinTransferFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.UpdateItemStringFee != nil {
		{
			size, err := m.UpdateItemStringFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.ItemTransferFeePercentage.Size()
		i -= size
		if _, err := m.ItemTransferFeePercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.RecipeFeePercentage.Size()
		i -= size
		if _, err := m.RecipeFeePercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.CoinIssuers) > 0 {
		for iNdEx := len(m.CoinIssuers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CoinIssuers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MinDescriptionFieldLength != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinDescriptionFieldLength))
		i--
		dAtA[i] = 0x10
	}
	if m.MinNameFieldLength != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinNameFieldLength))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GoogleIAPPackage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PackageName)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.ProductID)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *CoinIssuer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CoinDenom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if len(m.Packages) > 0 {
		for _, e := range m.Packages {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = len(m.GoogleIAPPubKey)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinNameFieldLength != 0 {
		n += 1 + sovParams(uint64(m.MinNameFieldLength))
	}
	if m.MinDescriptionFieldLength != 0 {
		n += 1 + sovParams(uint64(m.MinDescriptionFieldLength))
	}
	if len(m.CoinIssuers) > 0 {
		for _, e := range m.CoinIssuers {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = m.RecipeFeePercentage.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.ItemTransferFeePercentage.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.UpdateItemStringFee != nil {
		l = m.UpdateItemStringFee.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	l = m.MinTransferFee.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MaxTransferFee.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GoogleIAPPackage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoogleIAPPackage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoogleIAPPackage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PackageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinIssuer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinIssuer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinIssuer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Packages = append(m.Packages, &GoogleIAPPackage{})
			if err := m.Packages[len(m.Packages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoogleIAPPubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoogleIAPPubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinNameFieldLength", wireType)
			}
			m.MinNameFieldLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinNameFieldLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDescriptionFieldLength", wireType)
			}
			m.MinDescriptionFieldLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinDescriptionFieldLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinIssuers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinIssuers = append(m.CoinIssuers, CoinIssuer{})
			if err := m.CoinIssuers[len(m.CoinIssuers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipeFeePercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RecipeFeePercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemTransferFeePercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ItemTransferFeePercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateItemStringFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateItemStringFee == nil {
				m.UpdateItemStringFee = &types.Coin{}
			}
			if err := m.UpdateItemStringFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTransferFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinTransferFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTransferFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxTransferFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)

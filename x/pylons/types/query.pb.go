// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pylons/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # 3
type QueryListRecipesByCookbookRequest struct {
	CookbookID string `protobuf:"bytes,1,opt,name=CookbookID,proto3" json:"CookbookID,omitempty"`
}

func (m *QueryListRecipesByCookbookRequest) Reset()         { *m = QueryListRecipesByCookbookRequest{} }
func (m *QueryListRecipesByCookbookRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListRecipesByCookbookRequest) ProtoMessage()    {}
func (*QueryListRecipesByCookbookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{0}
}
func (m *QueryListRecipesByCookbookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListRecipesByCookbookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListRecipesByCookbookRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListRecipesByCookbookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListRecipesByCookbookRequest.Merge(m, src)
}
func (m *QueryListRecipesByCookbookRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListRecipesByCookbookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListRecipesByCookbookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListRecipesByCookbookRequest proto.InternalMessageInfo

func (m *QueryListRecipesByCookbookRequest) GetCookbookID() string {
	if m != nil {
		return m.CookbookID
	}
	return ""
}

type QueryListRecipesByCookbookResponse struct {
	Recipes []Recipe `protobuf:"bytes,1,rep,name=Recipes,proto3" json:"Recipes"`
}

func (m *QueryListRecipesByCookbookResponse) Reset()         { *m = QueryListRecipesByCookbookResponse{} }
func (m *QueryListRecipesByCookbookResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListRecipesByCookbookResponse) ProtoMessage()    {}
func (*QueryListRecipesByCookbookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{1}
}
func (m *QueryListRecipesByCookbookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListRecipesByCookbookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListRecipesByCookbookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListRecipesByCookbookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListRecipesByCookbookResponse.Merge(m, src)
}
func (m *QueryListRecipesByCookbookResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListRecipesByCookbookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListRecipesByCookbookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListRecipesByCookbookResponse proto.InternalMessageInfo

func (m *QueryListRecipesByCookbookResponse) GetRecipes() []Recipe {
	if m != nil {
		return m.Recipes
	}
	return nil
}

type QueryGetItemRequest struct {
	CookbookID string `protobuf:"bytes,1,opt,name=CookbookID,proto3" json:"CookbookID,omitempty"`
	RecipeID   string `protobuf:"bytes,2,opt,name=RecipeID,proto3" json:"RecipeID,omitempty"`
	ID         string `protobuf:"bytes,3,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *QueryGetItemRequest) Reset()         { *m = QueryGetItemRequest{} }
func (m *QueryGetItemRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetItemRequest) ProtoMessage()    {}
func (*QueryGetItemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{2}
}
func (m *QueryGetItemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetItemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetItemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetItemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetItemRequest.Merge(m, src)
}
func (m *QueryGetItemRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetItemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetItemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetItemRequest proto.InternalMessageInfo

func (m *QueryGetItemRequest) GetCookbookID() string {
	if m != nil {
		return m.CookbookID
	}
	return ""
}

func (m *QueryGetItemRequest) GetRecipeID() string {
	if m != nil {
		return m.RecipeID
	}
	return ""
}

func (m *QueryGetItemRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type QueryGetItemResponse struct {
	Item *Item `protobuf:"bytes,1,opt,name=Item,proto3" json:"Item,omitempty"`
}

func (m *QueryGetItemResponse) Reset()         { *m = QueryGetItemResponse{} }
func (m *QueryGetItemResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetItemResponse) ProtoMessage()    {}
func (*QueryGetItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{3}
}
func (m *QueryGetItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetItemResponse.Merge(m, src)
}
func (m *QueryGetItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetItemResponse proto.InternalMessageInfo

func (m *QueryGetItemResponse) GetItem() *Item {
	if m != nil {
		return m.Item
	}
	return nil
}

type QueryAllItemRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllItemRequest) Reset()         { *m = QueryAllItemRequest{} }
func (m *QueryAllItemRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllItemRequest) ProtoMessage()    {}
func (*QueryAllItemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{4}
}
func (m *QueryAllItemRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllItemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllItemRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllItemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllItemRequest.Merge(m, src)
}
func (m *QueryAllItemRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllItemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllItemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllItemRequest proto.InternalMessageInfo

func (m *QueryAllItemRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllItemResponse struct {
	Item       []*Item             `protobuf:"bytes,1,rep,name=Item,proto3" json:"Item,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllItemResponse) Reset()         { *m = QueryAllItemResponse{} }
func (m *QueryAllItemResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllItemResponse) ProtoMessage()    {}
func (*QueryAllItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{5}
}
func (m *QueryAllItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllItemResponse.Merge(m, src)
}
func (m *QueryAllItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllItemResponse proto.InternalMessageInfo

func (m *QueryAllItemResponse) GetItem() []*Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *QueryAllItemResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRecipeRequest struct {
	CookbookID string `protobuf:"bytes,1,opt,name=CookbookID,proto3" json:"CookbookID,omitempty"`
	ID         string `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *QueryGetRecipeRequest) Reset()         { *m = QueryGetRecipeRequest{} }
func (m *QueryGetRecipeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRecipeRequest) ProtoMessage()    {}
func (*QueryGetRecipeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{6}
}
func (m *QueryGetRecipeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRecipeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRecipeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRecipeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRecipeRequest.Merge(m, src)
}
func (m *QueryGetRecipeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRecipeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRecipeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRecipeRequest proto.InternalMessageInfo

func (m *QueryGetRecipeRequest) GetCookbookID() string {
	if m != nil {
		return m.CookbookID
	}
	return ""
}

func (m *QueryGetRecipeRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type QueryGetRecipeResponse struct {
	Recipe *Recipe `protobuf:"bytes,1,opt,name=Recipe,proto3" json:"Recipe,omitempty"`
}

func (m *QueryGetRecipeResponse) Reset()         { *m = QueryGetRecipeResponse{} }
func (m *QueryGetRecipeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRecipeResponse) ProtoMessage()    {}
func (*QueryGetRecipeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{7}
}
func (m *QueryGetRecipeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRecipeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRecipeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRecipeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRecipeResponse.Merge(m, src)
}
func (m *QueryGetRecipeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRecipeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRecipeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRecipeResponse proto.InternalMessageInfo

func (m *QueryGetRecipeResponse) GetRecipe() *Recipe {
	if m != nil {
		return m.Recipe
	}
	return nil
}

type QueryListCookbooksByCreatorRequest struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *QueryListCookbooksByCreatorRequest) Reset()         { *m = QueryListCookbooksByCreatorRequest{} }
func (m *QueryListCookbooksByCreatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListCookbooksByCreatorRequest) ProtoMessage()    {}
func (*QueryListCookbooksByCreatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{8}
}
func (m *QueryListCookbooksByCreatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListCookbooksByCreatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListCookbooksByCreatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListCookbooksByCreatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListCookbooksByCreatorRequest.Merge(m, src)
}
func (m *QueryListCookbooksByCreatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListCookbooksByCreatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListCookbooksByCreatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListCookbooksByCreatorRequest proto.InternalMessageInfo

func (m *QueryListCookbooksByCreatorRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type QueryListCookbooksByCreatorResponse struct {
	Cookbooks []Cookbook `protobuf:"bytes,1,rep,name=Cookbooks,proto3" json:"Cookbooks"`
}

func (m *QueryListCookbooksByCreatorResponse) Reset()         { *m = QueryListCookbooksByCreatorResponse{} }
func (m *QueryListCookbooksByCreatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListCookbooksByCreatorResponse) ProtoMessage()    {}
func (*QueryListCookbooksByCreatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{9}
}
func (m *QueryListCookbooksByCreatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListCookbooksByCreatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListCookbooksByCreatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListCookbooksByCreatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListCookbooksByCreatorResponse.Merge(m, src)
}
func (m *QueryListCookbooksByCreatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListCookbooksByCreatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListCookbooksByCreatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListCookbooksByCreatorResponse proto.InternalMessageInfo

func (m *QueryListCookbooksByCreatorResponse) GetCookbooks() []Cookbook {
	if m != nil {
		return m.Cookbooks
	}
	return nil
}

type QueryGetCookbookRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *QueryGetCookbookRequest) Reset()         { *m = QueryGetCookbookRequest{} }
func (m *QueryGetCookbookRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCookbookRequest) ProtoMessage()    {}
func (*QueryGetCookbookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{10}
}
func (m *QueryGetCookbookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCookbookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCookbookRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCookbookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCookbookRequest.Merge(m, src)
}
func (m *QueryGetCookbookRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCookbookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCookbookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCookbookRequest proto.InternalMessageInfo

func (m *QueryGetCookbookRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type QueryGetCookbookResponse struct {
	Cookbook *Cookbook `protobuf:"bytes,1,opt,name=Cookbook,proto3" json:"Cookbook,omitempty"`
}

func (m *QueryGetCookbookResponse) Reset()         { *m = QueryGetCookbookResponse{} }
func (m *QueryGetCookbookResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCookbookResponse) ProtoMessage()    {}
func (*QueryGetCookbookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbe4a0dc0744f938, []int{11}
}
func (m *QueryGetCookbookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCookbookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCookbookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCookbookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCookbookResponse.Merge(m, src)
}
func (m *QueryGetCookbookResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCookbookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCookbookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCookbookResponse proto.InternalMessageInfo

func (m *QueryGetCookbookResponse) GetCookbook() *Cookbook {
	if m != nil {
		return m.Cookbook
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryListRecipesByCookbookRequest)(nil), "Pylonstech.pylons.pylons.QueryListRecipesByCookbookRequest")
	proto.RegisterType((*QueryListRecipesByCookbookResponse)(nil), "Pylonstech.pylons.pylons.QueryListRecipesByCookbookResponse")
	proto.RegisterType((*QueryGetItemRequest)(nil), "Pylonstech.pylons.pylons.QueryGetItemRequest")
	proto.RegisterType((*QueryGetItemResponse)(nil), "Pylonstech.pylons.pylons.QueryGetItemResponse")
	proto.RegisterType((*QueryAllItemRequest)(nil), "Pylonstech.pylons.pylons.QueryAllItemRequest")
	proto.RegisterType((*QueryAllItemResponse)(nil), "Pylonstech.pylons.pylons.QueryAllItemResponse")
	proto.RegisterType((*QueryGetRecipeRequest)(nil), "Pylonstech.pylons.pylons.QueryGetRecipeRequest")
	proto.RegisterType((*QueryGetRecipeResponse)(nil), "Pylonstech.pylons.pylons.QueryGetRecipeResponse")
	proto.RegisterType((*QueryListCookbooksByCreatorRequest)(nil), "Pylonstech.pylons.pylons.QueryListCookbooksByCreatorRequest")
	proto.RegisterType((*QueryListCookbooksByCreatorResponse)(nil), "Pylonstech.pylons.pylons.QueryListCookbooksByCreatorResponse")
	proto.RegisterType((*QueryGetCookbookRequest)(nil), "Pylonstech.pylons.pylons.QueryGetCookbookRequest")
	proto.RegisterType((*QueryGetCookbookResponse)(nil), "Pylonstech.pylons.pylons.QueryGetCookbookResponse")
}

func init() { proto.RegisterFile("pylons/query.proto", fileDescriptor_dbe4a0dc0744f938) }

var fileDescriptor_dbe4a0dc0744f938 = []byte{
	// 725 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0xc7, 0xe3, 0xc0, 0xe5, 0x63, 0x90, 0xae, 0x74, 0x07, 0x02, 0x96, 0x75, 0x6b, 0xc2, 0x54,
	0x2a, 0x1f, 0x05, 0x4f, 0x93, 0x6e, 0x2a, 0xb5, 0x45, 0x2d, 0x44, 0xa0, 0x54, 0x5d, 0x50, 0x2f,
	0x91, 0xba, 0x70, 0xa2, 0xa9, 0xb1, 0x48, 0x32, 0x26, 0x1e, 0xaa, 0x46, 0x11, 0x9b, 0x3e, 0x01,
	0x12, 0xaa, 0xd4, 0xa7, 0xe9, 0xb2, 0x62, 0x89, 0xd4, 0x45, 0xbb, 0xaa, 0x2a, 0xe8, 0x83, 0x54,
	0x9e, 0x39, 0xe3, 0xc4, 0x81, 0x10, 0x97, 0x95, 0xed, 0xff, 0x9c, 0x8f, 0xdf, 0x9c, 0x39, 0x67,
	0x8c, 0x70, 0xd8, 0x69, 0xf0, 0x56, 0x44, 0x8f, 0x8e, 0x59, 0xbb, 0xe3, 0x84, 0x6d, 0x2e, 0x38,
	0x36, 0xf7, 0xa4, 0x26, 0x58, 0xfd, 0xc0, 0x51, 0xcb, 0xf0, 0xb0, 0xfe, 0xf7, 0x39, 0xf7, 0x1b,
	0x8c, 0x7a, 0x61, 0x40, 0xbd, 0x56, 0x8b, 0x0b, 0x4f, 0x04, 0x72, 0x39, 0xf6, 0xb3, 0xd6, 0xea,
	0x3c, 0x6a, 0xf2, 0x88, 0xd6, 0xbc, 0x88, 0xa9, 0x80, 0xf4, 0x7d, 0xa9, 0xc6, 0x84, 0x57, 0xa2,
	0xa1, 0xe7, 0x07, 0x2d, 0x69, 0x0c, 0xb6, 0x73, 0x3e, 0xf7, 0xb9, 0x7c, 0xa5, 0xf1, 0x1b, 0xa8,
	0xff, 0x01, 0x4d, 0x20, 0x58, 0x13, 0xa4, 0x59, 0x90, 0xda, 0xac, 0x1e, 0x84, 0x0c, 0xc4, 0x02,
	0x88, 0x75, 0xce, 0x0f, 0x6b, 0x9c, 0x1f, 0x2a, 0x99, 0x6c, 0xa3, 0xa5, 0x37, 0x71, 0xda, 0xd7,
	0x41, 0x24, 0x5c, 0x69, 0x1f, 0x6d, 0x75, 0xb6, 0xc1, 0xc6, 0x65, 0x47, 0xc7, 0x2c, 0x12, 0xd8,
	0x46, 0x48, 0x4b, 0xd5, 0x8a, 0x69, 0x14, 0x8d, 0x95, 0x69, 0xb7, 0x4f, 0x21, 0xef, 0x10, 0xb9,
	0x2d, 0x48, 0x14, 0xf2, 0x56, 0xc4, 0xf0, 0x0b, 0x34, 0x09, 0x8b, 0xa6, 0x51, 0x1c, 0x5b, 0x99,
	0x29, 0x17, 0x9d, 0x61, 0x55, 0x73, 0x94, 0xe1, 0xd6, 0xf8, 0xf9, 0xcf, 0xc5, 0x9c, 0xab, 0xdd,
	0x88, 0x87, 0x66, 0x65, 0x9e, 0x5d, 0x26, 0xaa, 0x82, 0x35, 0x33, 0xe2, 0x61, 0x0b, 0x4d, 0xa9,
	0x08, 0xd5, 0x8a, 0x99, 0x97, 0xab, 0xc9, 0x37, 0xfe, 0x17, 0xe5, 0xab, 0x15, 0x73, 0x4c, 0xaa,
	0xf9, 0x6a, 0x85, 0xbc, 0x42, 0x73, 0xe9, 0x14, 0x00, 0x5f, 0x46, 0xe3, 0xf1, 0xb7, 0x8c, 0x3e,
	0x53, 0xb6, 0x87, 0x93, 0x4b, 0x2f, 0x69, 0x4b, 0xde, 0x02, 0xee, 0xcb, 0x46, 0xa3, 0x1f, 0x77,
	0x07, 0xa1, 0xde, 0xd9, 0x42, 0xc0, 0x07, 0x8e, 0x6a, 0x04, 0x27, 0x6e, 0x04, 0x47, 0x75, 0x16,
	0x34, 0x82, 0xb3, 0xe7, 0xf9, 0x0c, 0x7c, 0xdd, 0x3e, 0x4f, 0x72, 0x66, 0x00, 0x6b, 0x12, 0xff,
	0x1a, 0xeb, 0x58, 0x56, 0x56, 0xbc, 0x9b, 0x82, 0xca, 0x4b, 0xa8, 0xe5, 0x91, 0x50, 0x2a, 0x61,
	0x8a, 0x6a, 0x17, 0x15, 0x74, 0x01, 0x55, 0x91, 0xb3, 0x9e, 0x92, 0x3a, 0x89, 0x7c, 0x72, 0x12,
	0x2e, 0x9a, 0x1f, 0x0c, 0x04, 0xfb, 0x7b, 0x82, 0x26, 0x94, 0x02, 0xc5, 0x1b, 0xd9, 0x47, 0x2e,
	0xd8, 0x93, 0xcd, 0xbe, 0x46, 0xd5, 0xa9, 0xe3, 0x56, 0x6d, 0x33, 0x4f, 0xf0, 0xb6, 0x26, 0x35,
	0xd1, 0x64, 0x5d, 0x29, 0x80, 0xa9, 0x3f, 0x49, 0x13, 0xdd, 0xbf, 0xd5, 0x1f, 0x00, 0x77, 0xd0,
	0x74, 0xb2, 0x0a, 0xa7, 0x40, 0x86, 0x33, 0x6a, 0x53, 0xe8, 0xf6, 0x9e, 0x2b, 0x59, 0x45, 0x0b,
	0xba, 0x04, 0x83, 0x23, 0xa9, 0xaa, 0x65, 0x24, 0xd5, 0xda, 0x47, 0xe6, 0x75, 0x53, 0xc0, 0xd9,
	0x44, 0x53, 0x5a, 0x83, 0x8a, 0x65, 0xa0, 0x71, 0x13, 0x9f, 0xf2, 0xf7, 0x09, 0xf4, 0x8f, 0x0c,
	0x8e, 0xbf, 0x1a, 0xa8, 0x70, 0xe3, 0x90, 0xe3, 0xa7, 0xc3, 0x23, 0x8e, 0xbc, 0x5f, 0xac, 0x67,
	0x77, 0x73, 0x56, 0xdb, 0x23, 0xe5, 0x8f, 0xdf, 0x7e, 0x9f, 0xe5, 0xd7, 0xf1, 0x1a, 0x85, 0x2b,
	0xae, 0x71, 0x93, 0x39, 0xed, 0xf6, 0x7a, 0xed, 0x04, 0x7f, 0x36, 0xd4, 0x8c, 0xe0, 0x8d, 0x11,
	0xa9, 0xd3, 0x57, 0x8d, 0xe5, 0x64, 0x35, 0x07, 0xb6, 0x92, 0x64, 0x7b, 0x88, 0x57, 0x69, 0xdf,
	0x35, 0x9d, 0x42, 0xa1, 0x5d, 0x7d, 0x17, 0x9d, 0xd0, 0x6e, 0x8c, 0xf6, 0xc9, 0xd0, 0xed, 0x8d,
	0xe9, 0xe8, 0x6c, 0xa9, 0x19, 0xb3, 0x1e, 0x65, 0x77, 0x00, 0xc0, 0x15, 0x09, 0x48, 0x70, 0x91,
	0xa6, 0x7e, 0x1a, 0x03, 0x88, 0x31, 0xd7, 0x17, 0x03, 0xcd, 0xdf, 0xdc, 0xf7, 0x38, 0xcb, 0xf9,
	0x0d, 0x1d, 0x37, 0xeb, 0xf9, 0x1d, 0xbd, 0x61, 0x07, 0xcb, 0x72, 0x07, 0x4b, 0x78, 0xb1, 0xff,
	0xf8, 0x13, 0x7b, 0xda, 0x85, 0xd9, 0x3d, 0xc1, 0xa7, 0x46, 0x6f, 0x0e, 0x70, 0x69, 0x74, 0xa5,
	0x06, 0xbb, 0xb4, 0xfc, 0x37, 0x2e, 0x00, 0x77, 0x4f, 0xc2, 0x2d, 0xe0, 0x02, 0x1d, 0xf8, 0xfd,
	0xca, 0x9a, 0x6e, 0xed, 0x9c, 0x5f, 0xda, 0xc6, 0xc5, 0xa5, 0x6d, 0xfc, 0xba, 0xb4, 0x8d, 0xd3,
	0x2b, 0x3b, 0x77, 0x71, 0x65, 0xe7, 0x7e, 0x5c, 0xd9, 0xb9, 0xfd, 0x75, 0x3f, 0x10, 0x07, 0xc7,
	0x35, 0xa7, 0xce, 0x9b, 0x54, 0xa5, 0xdd, 0x88, 0xf3, 0xea, 0x30, 0x1f, 0xf4, 0x8b, 0xe8, 0x84,
	0x2c, 0xaa, 0x4d, 0xc8, 0x9f, 0xf9, 0xe3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x48, 0x4f, 0xc2,
	0x5c, 0x9b, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a list of listRecipesByCookbook items.
	ListRecipesByCookbook(ctx context.Context, in *QueryListRecipesByCookbookRequest, opts ...grpc.CallOption) (*QueryListRecipesByCookbookResponse, error)
	// Queries a item by ID.
	Item(ctx context.Context, in *QueryGetItemRequest, opts ...grpc.CallOption) (*QueryGetItemResponse, error)
	// Retrieves a recipe by ID.
	Recipe(ctx context.Context, in *QueryGetRecipeRequest, opts ...grpc.CallOption) (*QueryGetRecipeResponse, error)
	// Retrieves the list of cookbooks owned by an address
	ListCookbooksByCreator(ctx context.Context, in *QueryListCookbooksByCreatorRequest, opts ...grpc.CallOption) (*QueryListCookbooksByCreatorResponse, error)
	// Retrieves a cookbook by ID.
	Cookbook(ctx context.Context, in *QueryGetCookbookRequest, opts ...grpc.CallOption) (*QueryGetCookbookResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ListRecipesByCookbook(ctx context.Context, in *QueryListRecipesByCookbookRequest, opts ...grpc.CallOption) (*QueryListRecipesByCookbookResponse, error) {
	out := new(QueryListRecipesByCookbookResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/ListRecipesByCookbook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Item(ctx context.Context, in *QueryGetItemRequest, opts ...grpc.CallOption) (*QueryGetItemResponse, error) {
	out := new(QueryGetItemResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/Item", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Recipe(ctx context.Context, in *QueryGetRecipeRequest, opts ...grpc.CallOption) (*QueryGetRecipeResponse, error) {
	out := new(QueryGetRecipeResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/Recipe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListCookbooksByCreator(ctx context.Context, in *QueryListCookbooksByCreatorRequest, opts ...grpc.CallOption) (*QueryListCookbooksByCreatorResponse, error) {
	out := new(QueryListCookbooksByCreatorResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/ListCookbooksByCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Cookbook(ctx context.Context, in *QueryGetCookbookRequest, opts ...grpc.CallOption) (*QueryGetCookbookResponse, error) {
	out := new(QueryGetCookbookResponse)
	err := c.cc.Invoke(ctx, "/Pylonstech.pylons.pylons.Query/Cookbook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a list of listRecipesByCookbook items.
	ListRecipesByCookbook(context.Context, *QueryListRecipesByCookbookRequest) (*QueryListRecipesByCookbookResponse, error)
	// Queries a item by ID.
	Item(context.Context, *QueryGetItemRequest) (*QueryGetItemResponse, error)
	// Retrieves a recipe by ID.
	Recipe(context.Context, *QueryGetRecipeRequest) (*QueryGetRecipeResponse, error)
	// Retrieves the list of cookbooks owned by an address
	ListCookbooksByCreator(context.Context, *QueryListCookbooksByCreatorRequest) (*QueryListCookbooksByCreatorResponse, error)
	// Retrieves a cookbook by ID.
	Cookbook(context.Context, *QueryGetCookbookRequest) (*QueryGetCookbookResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ListRecipesByCookbook(ctx context.Context, req *QueryListRecipesByCookbookRequest) (*QueryListRecipesByCookbookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecipesByCookbook not implemented")
}
func (*UnimplementedQueryServer) Item(ctx context.Context, req *QueryGetItemRequest) (*QueryGetItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Item not implemented")
}
func (*UnimplementedQueryServer) Recipe(ctx context.Context, req *QueryGetRecipeRequest) (*QueryGetRecipeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recipe not implemented")
}
func (*UnimplementedQueryServer) ListCookbooksByCreator(ctx context.Context, req *QueryListCookbooksByCreatorRequest) (*QueryListCookbooksByCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCookbooksByCreator not implemented")
}
func (*UnimplementedQueryServer) Cookbook(ctx context.Context, req *QueryGetCookbookRequest) (*QueryGetCookbookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cookbook not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ListRecipesByCookbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListRecipesByCookbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListRecipesByCookbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/ListRecipesByCookbook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListRecipesByCookbook(ctx, req.(*QueryListRecipesByCookbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Item_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Item(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/Item",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Item(ctx, req.(*QueryGetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Recipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Recipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/Recipe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Recipe(ctx, req.(*QueryGetRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListCookbooksByCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListCookbooksByCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListCookbooksByCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/ListCookbooksByCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListCookbooksByCreator(ctx, req.(*QueryListCookbooksByCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Cookbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCookbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Cookbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pylonstech.pylons.pylons.Query/Cookbook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Cookbook(ctx, req.(*QueryGetCookbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Pylonstech.pylons.pylons.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRecipesByCookbook",
			Handler:    _Query_ListRecipesByCookbook_Handler,
		},
		{
			MethodName: "Item",
			Handler:    _Query_Item_Handler,
		},
		{
			MethodName: "Recipe",
			Handler:    _Query_Recipe_Handler,
		},
		{
			MethodName: "ListCookbooksByCreator",
			Handler:    _Query_ListCookbooksByCreator_Handler,
		},
		{
			MethodName: "Cookbook",
			Handler:    _Query_Cookbook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pylons/query.proto",
}

func (m *QueryListRecipesByCookbookRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListRecipesByCookbookRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListRecipesByCookbookRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CookbookID) > 0 {
		i -= len(m.CookbookID)
		copy(dAtA[i:], m.CookbookID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CookbookID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListRecipesByCookbookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListRecipesByCookbookResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListRecipesByCookbookResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Recipes) > 0 {
		for iNdEx := len(m.Recipes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Recipes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetItemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetItemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetItemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RecipeID) > 0 {
		i -= len(m.RecipeID)
		copy(dAtA[i:], m.RecipeID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RecipeID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CookbookID) > 0 {
		i -= len(m.CookbookID)
		copy(dAtA[i:], m.CookbookID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CookbookID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllItemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllItemRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllItemRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Item) > 0 {
		for iNdEx := len(m.Item) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Item[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRecipeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRecipeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRecipeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CookbookID) > 0 {
		i -= len(m.CookbookID)
		copy(dAtA[i:], m.CookbookID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CookbookID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRecipeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRecipeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRecipeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Recipe != nil {
		{
			size, err := m.Recipe.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListCookbooksByCreatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListCookbooksByCreatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListCookbooksByCreatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListCookbooksByCreatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListCookbooksByCreatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListCookbooksByCreatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cookbooks) > 0 {
		for iNdEx := len(m.Cookbooks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cookbooks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCookbookRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCookbookRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCookbookRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCookbookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCookbookResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCookbookResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cookbook != nil {
		{
			size, err := m.Cookbook.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryListRecipesByCookbookRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CookbookID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListRecipesByCookbookResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Recipes) > 0 {
		for _, e := range m.Recipes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetItemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CookbookID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.RecipeID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllItemRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRecipeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CookbookID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRecipeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Recipe != nil {
		l = m.Recipe.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListCookbooksByCreatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListCookbooksByCreatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cookbooks) > 0 {
		for _, e := range m.Cookbooks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetCookbookRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCookbookResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cookbook != nil {
		l = m.Cookbook.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryListRecipesByCookbookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListRecipesByCookbookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListRecipesByCookbookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookbookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CookbookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListRecipesByCookbookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListRecipesByCookbookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListRecipesByCookbookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipes = append(m.Recipes, Recipe{})
			if err := m.Recipes[len(m.Recipes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetItemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetItemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetItemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookbookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CookbookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &Item{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllItemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllItemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllItemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &Item{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRecipeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRecipeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRecipeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CookbookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CookbookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRecipeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRecipeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRecipeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Recipe == nil {
				m.Recipe = &Recipe{}
			}
			if err := m.Recipe.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListCookbooksByCreatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListCookbooksByCreatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListCookbooksByCreatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListCookbooksByCreatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListCookbooksByCreatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListCookbooksByCreatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookbooks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cookbooks = append(m.Cookbooks, Cookbook{})
			if err := m.Cookbooks[len(m.Cookbooks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCookbookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCookbookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCookbookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCookbookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCookbookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCookbookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookbook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cookbook == nil {
				m.Cookbook = &Cookbook{}
			}
			if err := m.Cookbook.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)

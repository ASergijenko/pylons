(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.docHeadExtract = factory());
}(this, (function () { 'use strict';

  function parseDomString (str) {
    if (typeof str !== 'string') {
      return null
    }
    const reg = /<([^<]+)>(.*)<\/.+>/;
    const matchs = str.match(reg);
    let obj = null;

    if (matchs) {
      const head = matchs[1];
      const arr = head.split(' ');
      let content = matchs[2];
      content = content.split(/<\/?\w[^<]*>/).join('').trim();

      obj = {
        tagName: '',
        props: {},
        content: content
      };

      obj.tagName = arr[0];
      for (let i = 1, len = arr.length; i < len; ++i) {
        const prop = arr[i].split('=');
        obj.props[prop[0]] = String(prop[1]).replace(/['"]/g, '').trim();
      }
    }

    return obj
  }

  function insertHeading (headings, headObj) {
    if (!headObj) {
      return
    }
    if (headings.length === 0) {
      headings.push(headObj);
    } else {
      const depth = headObj.depth;
      const h = headings[headings.length - 1];
      if (depth <= h.depth) {
        headings.push(headObj);
      } else {
        insertHeading(h.sub, headObj);
      }
    }
  }

  const headingReg = /<h\d[^<]*>[^<]*<\/h\d>/g;

  function getHeadingObj(node) {
    return {
      anchor: node.props.id,
      name: node.content,
      sub: [],
      depth: +node.tagName.substr(1)
    }
  }

  function index (html) {
    const headingNodes = html.match(headingReg);
    let headings = [];

    if (headingNodes && headingNodes.length > 0) {
      for (let i = 0, len = headingNodes.length; i < len; ++i) {
        insertHeading(headings, getHeadingObj(parseDomString(headingNodes[i])));
      }
    }

    return headings
  }

  return index;

})));

syntax = "proto3";
package Pylonstech.pylons.pylons;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
// this line is used by starport scaffolding # 1
import "pylons/recipe.proto";
import "pylons/cookbook.proto";

option go_package = "github.com/Pylons-tech/pylons/x/pylons/types";

// Query defines the gRPC querier service.
service Query {
    // this line is used by starport scaffolding # 2

	// Queries a recipe by index.
	rpc Recipe(QueryGetRecipeRequest) returns (QueryGetRecipeResponse) {
		option (google.api.http).get = "/pylons/recipe/{CookbookID}/{ID}";
	}


	// Queries a list of listCookbookByCreator items.
	rpc ListCookbooksByCreator(QueryListCookbooksByCreatorRequest) returns (QueryListCookbooksByCreatorResponse) {
		option (google.api.http).get = "/pylons/listCookbooks/{creator}";
	}


	// Queries a cookbook by index.
	rpc Cookbook(QueryGetCookbookRequest) returns (QueryGetCookbookResponse) {
		option (google.api.http).get = "/pylons/cookbook/{ID}";
	}

}

// this line is used by starport scaffolding # 3
message QueryGetRecipeRequest {
	string CookbookID = 1;
	string ID = 2;
}

message QueryGetRecipeResponse {
	Recipe Recipe = 1;
}


message QueryListCookbooksByCreatorRequest {
  string creator = 1;
}

message QueryListCookbooksByCreatorResponse {
  repeated Cookbook Cookbooks = 1 [(gogoproto.nullable) = false];
}

message QueryGetCookbookRequest {
	string ID = 1;
}

message QueryGetCookbookResponse {
	Cookbook Cookbook = 1;
}


syntax = "proto3";
package Pylonstech.pylons.pylons;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
// this line is used by starport scaffolding # 1
import "pylons/execution.proto";
import "pylons/item.proto";
import "pylons/recipe.proto";
import "pylons/cookbook.proto";

option go_package = "github.com/Pylons-tech/pylons/x/pylons/types";

// Query defines the gRPC querier service.
service Query {
	// this line is used by starport scaffolding # 2

	// Queries a execution by id.
	rpc Execution(QueryGetExecutionRequest) returns (QueryGetExecutionResponse) {
		option (google.api.http).get = "/Pylons-tech/pylons/pylons/execution/{ID}";
	}


	// Queries a list of listRecipesByCookbook items.
	rpc ListRecipesByCookbook(QueryListRecipesByCookbookRequest) returns (QueryListRecipesByCookbookResponse) {
		option (google.api.http).get = "/pylons/listRecipesByCookbook/{CookbookID}";
	}


	// Queries a item by ID.
	rpc Item(QueryGetItemRequest) returns (QueryGetItemResponse) {
		option (google.api.http).get = "/pylons/item/{CookbookID}/{RecipeID}/{ID}";
	}


	// Retrieves a recipe by ID.
	rpc Recipe(QueryGetRecipeRequest) returns (QueryGetRecipeResponse) {
		option (google.api.http).get = "/pylons/recipe/{CookbookID}/{ID}";
	}


	// Retrieves the list of cookbooks owned by an address
	rpc ListCookbooksByCreator(QueryListCookbooksByCreatorRequest) returns (QueryListCookbooksByCreatorResponse) {
		option (google.api.http).get = "/pylons/listCookbooks/{creator}";
	}


	// Retrieves a cookbook by ID.
	rpc Cookbook(QueryGetCookbookRequest) returns (QueryGetCookbookResponse) {
		option (google.api.http).get = "/pylons/cookbook/{ID}";
	}

}

// this line is used by starport scaffolding # 3
message QueryGetExecutionRequest {
	uint64 ID = 1;
}

message QueryGetExecutionResponse {
	Execution Execution = 1;
}

message QueryAllExecutionRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllExecutionResponse {
	repeated Execution Execution = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
message QueryListRecipesByCookbookRequest {
  string CookbookID = 1;
}

message QueryListRecipesByCookbookResponse {
	repeated Recipe Recipes = 1 [(gogoproto.nullable) = false];
}

message QueryGetItemRequest {
	string CookbookID = 1;
	string RecipeID = 2;
	string ID = 3;
}

message QueryGetItemResponse {
	Item Item = 1;
}

message QueryAllItemRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllItemResponse {
	repeated Item Item = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
message QueryGetRecipeRequest {
	string CookbookID = 1;
	string ID = 2;
}

message QueryGetRecipeResponse {
	Recipe Recipe = 1;
}


message QueryListCookbooksByCreatorRequest {
  string creator = 1;
}

message QueryListCookbooksByCreatorResponse {
  repeated Cookbook Cookbooks = 1 [(gogoproto.nullable) = false];
}

message QueryGetCookbookRequest {
	string ID = 1;
}

message QueryGetCookbookResponse {
	Cookbook Cookbook = 1;
}

